// Data types
// Booleans
true;  // Not false.
false; // Not *not* false.

// Numbers
1234;  // An integer.
12.34; // A decimal number.

// Strings
"I am a string";
"";    // The empty string.
"123"; // This is a string, not a number.

// Nil
nil; // This is nil/null

// Expressions
// Arithmetics
let me = nil;
let add = 23 + 41;
let subtract = 13 - 4;
let multiply = 13 * 4;
let divide = 62 / 2;

let negateMe = -add;

// Comparison and equality
let less = add < subtract;
let more = multiply > divide;

let equality = add == subtract;
let inequality = multiply != divide;

// Unary logical operator
let isTrue = !false;
let isFalse = !true;

// Binary logical operator
let andTrue = isTrue and !isFalse;
let orFalse = !isTrue or isFalse;

// Precedence and grouping
let min = 14;
let max = 22;
let average = (min + max) / 2;

// Variables
// Can reassign an existing variable
min = 5;

// Printing
print average;

// Blocks
{
    print "This is a new block";
    let x = 15;
}
print "`x` isn't available in this scope";

// Control flow
// If branching
if (average > 5) {
    print "yes";
} else {
    print "no";
}

// While loops
let a = 1;
while (a < 10) {
    print a;
    a = a + 1;
}

// For loops
for (let i = 1; i < 10; i = i + 1) {
    print i;
}

// Functions
function printSum(a: number, b: number): void {
    print a + b;
}

function returnSum(a: number, b: number): number {
    return a + b;
}

// Closures

function identity(a: (number, number) => number): (number, number) => number {
    return a;
}

print identity(returnSum)(1, 2); // prints "3";

function outerFunction(): void {
    function localFunction(): void {
        print "I'm local!";
    }
    localFunction();
}

function returnFunction(): () => void {
    let outside = "outside";

    function inner(): void {
        let outside = "inside";
        print outside;
    }

    return inner;
}

let fn = returnFunction();
print "achtung1";
fn();
print "achtung2";

// Classes WIP

/*
class SuperClass {
    a: number
}

class SubClass < SuperClass {
    // Nested class
    nested: NestedClass
}

class NestedClass {
    field: string
    method(): string {
        return "execute this";
    }
}

// Constructor call
let x = SubClass();
// Assigning nil to a class type
let nilTest = SubClass();
nilTest = nil;

// Accessing members of a class
let value = x.nested.method() + "wasd";
print value;

// Accessing members of a super class
let superValue = x.a;
print superValue;

// Assigning a subclass to a super class
let superType: SuperClass = x;
print superType.a;
*/
